############################################ COSTS #################################################
 
cost.epc.gamma=0.2					# Cache cost factor; ignored iff cost.cache.type=fixed
cost.epc.target_utilization=0.95 	# ignored iff cost.cache.type=fixed


#		cost.cache.pricing_scheme
#	- fixed
#		In this case a fixed price is used for each caching decision, as defined in parameter
#		"cost.cache.fixed_price.sc" 	
#	- dynamic.type_01
# 		The value returned is defined by the following function
#		price:= max (0, previous_price + gamma * (utilization - cost.epc.target_utilization)
#		Note that if there is overdemand of the buffer, the price continues to increase.
#	- dynamic.type_02
#		If utilization falls below the target threshold, then price turns to zero rather than 
#		decaying as in the case of dynamic.type_02
#
cost.cache.pricing_scheme=dynamic.type_01




#		cost.transfer_cost_on_miss.type
#	Refers to the remote path cost computation
#
#	- propagation_delay+mc_wireless:
#		Uses the cost.transfer_delay.hop_cost x cost.transfer.propagation.hop_count.{mean, std}
#		Single hop cost as defined by cost.transfer.wireless_hop_cost.{sc, mc}
#
#	- monetary: uses MDU, i.e. cost Monetary per Data Unit 
cost.transfer_cost_on_miss.type=propagation_delay+mc_wireless




#		Macrocell Monetary cost per Data Unit (MDU)
cost.mc.MDU=10	


#	The following are used to compute the cost of the remote distance between the origins ISP of an item
# being requested, and the ISP serving the mobile
cost.transfer_delay.propagation.hop_count.mean=10#4.2 
cost.transfer_delay.propagation.hop_count.std=0#1.05
cost.transfer_delay.hop_cost=10#10.0

cost.transfer_delay.wireless_hop_cost.mc=0#58.0
cost.transfer_delay.wireless_hop_cost.sc=10.0

