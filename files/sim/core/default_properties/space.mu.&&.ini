############################# SPACE - MOBILE USERS ##############################


# How many clones relative to the total numbr of mobiles.  Used for mobility traces only.
# Choose '0' to have no clones
# Choose 'x' to have x*100% of added clone mobiles
# Choose up to '-x' to have x*100% subtracted mobiles, i.e. '-1' to have no mobiles
space.mu.clonefactor=0


#								space.mu.group.size
# 	This is a list property. For each group of mobiles introduced, add the number of mobiles 
#	followed by a comma for the next group. Note that the number of arguments also 
#	defines the number of groups.
#	
space.mu.group.size=1000
#paper-part1:2800 
#paper-part2:1000 (low) or 25000 (high demand)

#							space.mu.shuffle
# Shuffles the order of mobile users` caching decisions. 
# 	- always
#	- never
#	- upon_creation
space.mu.shuffle=always


	
# 									space.mu.group.init.pos:
#	Choose either a valid orientation from west, center, east, south_east, south_west, 
#	north_east, north_west, or a couple of coordinates in the form [x|y], or 
#	random, trace (i.e. defined in trace). All posible combinations are allowed.
#
#	This is a list property, with one value per group. 
#	This is a list property, with one value per group. Alternatively, you may choose a single 
#	cross-group value.
space.mu.group.init.pos=random#[250|0], [0|50], [0|150], [0|250], [0|350]

	#	examples: random, [6|5], south_west, south_west, random, center, random

#										 mu.group.reset.pos:
#	Valid values:
#		- "init" resets the mobiles to their intial position as defined by the value of mu.group.init.pos, 
#   	- [x|y] can be used for placing and resetting
#		- "random_x" resets the mobiles to their initial y coordinate and a randomly chosen x coordinate.
#		- "random_y" resets the mobiles to their initial x coordinate and a randomly chosen y coordinate.
#		- "random" implies a joint usage of "random_x" and "random_y". Use this valid value to
#			reset the position of mobiles to randomly chosen coordinates that are most probably 
#			different than their inital ones. 
#		- loop+no_reset
#				Loops to the other extreme point of the area (e.g from from 300,699 to 300,0)
#				based on the MU's last point in the area, movement and orientation, without 
#				resetting.	
#	This is a list property, with one value per group. Alternatively, you may choose a single 
#	cross-group value.
space.mu.group.reset.pos=random;




#								 space.mu.group.init.roam_start
#	The number of mobiles that start roaming with each simulation clock tick. 
#	Example: space.mu.group.init.roam_start=10 denotes that mobiles with IDs 0,1..9 join the simulation
#	time 0, then mobiles with IDs 10..19 join the simulation at time 1, and so forth.
#	Note that value less than 1 denote that all mobiles start roaming at time 0.
#
#	This is a list property that accepts one value per group or one cross-group value.
space.mu.group.init.roam_start=10



#						 space.mu.group.residence_delay
#	Max time following the establishment of a connection to a small cell during which 
#	mobile users do not move from their position. Each mobile makes a random period 
#	duration choice en [0, Max]. 
#
#	This is a list property that accepts one value per group or one cross-group value.
space.mu.group.residence_delay=0
space.mu.group.handover_delay=0


# value 1.0 gives best accuracy. +/- percentage error for predicting 
# the handover and residence times used for selecting the 
# chunks that will be requested to be cached.
space.mu.mobilityaccuracy=1.0



#									space.mu.group.velocity.{mean,stdev}
#
#	Property that defines the speed of mobile users
#
#	This is a list property that accepts one value per group or one cross-group value.
# 	Average human walking speed s 5 km/h with a roughly stdev = 1.25. So a choice  of
#	x-fold numeric double values may denote an x secods per each simulation time unit  
space.mu.group.velocity.mean=5
space.mu.group.velocity.stdev=1.25


#                 space.mu.group.prohibit_rplc_minDist
#   Replacing items at a given small cell SC is prohibited when at least one of
#   the requesting mobiles gets closer to the center of SC than than this limmit
#   distance .
space.mu.group.prohibit_rplc_minDist=100

space.mu.isSoft=false;


#						space.mu.init.cache_decisions
#	Set this property to true to take cache decisions (EPC, naive, etc.. ) for mobiles connected 
#	to a small cell upon initialization
space.mu.init.cache_decisions=false	#@todo consider to delete due to possible inconsistences		


#						space.mu.init.connect.sc
#
#	Set to true to connect mobiles to a small cell upon initialization 
#	according to the (property-defined) connection policy.
space.mu.init.connect.sc=false #@todo consider to delete due to possible inconsistences



