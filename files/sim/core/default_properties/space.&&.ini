############################## Cell Trace ###################################
# 								space.sc.trace_path
#
#	Cautions! Must be set along with parameters: 
#		- space.sc.neighborhood=TRACE.
#		- space.sc.init=TRACE
#
space.sc.trace_base=<FILES>/sim/traces/celltrace
space.sc.trace=seed=120.log 
space.sc.trace.prob_matrix=seed=120;seed=107;seed=11# Probability Matrix.csv
space.sc.trace_metadata=seed=120.meta






############################# AREA DIMENSIONS ##############################

# Dimensions of the space are
space.area.x=-1
space.area.y=-1



# 								space.sc.init
#
#	Cautions! If set to "trace", then the following parameters must be set as well: 
#		- space.sc.neighborhood=TRACE.
#		- space.sc.trace_path=<the_path_to_trace_file>
#
#
#	- "RANDOM": Space.sc.num smaller cells are randomly placed based on the random generator in use, 
#				with each small cell's radius defined by parameter space.sc.radious.
#
#	- "RANDOM_UNIFORM": extends "random" with a bias towards a guaranteed uniform distribution of the 
#				small cells' centers in the area of the macro cell.
#
#	- "TRACE": 	SCs are created and placed in the area according to the trace file defined in 
#				parameter space.sc.trace_path. Note that in this case the rest of the ini file
#				parameters regarding the SCs are ignored.
#
#	- "[x1|y1], [x2|y2], .. ":
#				List of N pairs of coordinates for N groups of small cells

space.sc.init=TRACE






# 								sc.radious sc.num combination
space.sc.radious.mean=400
space.sc.radious.stdev=50#10

#	This is overriden in case a trace of small cells is used.
space.sc.num=25
	# 21 in simulations part 1 of the paper


	
	
######################### SPACE {COVERAGE and CONNECTIVITY} #########################

# space.sc.coverage
space.sc.coverage=closest_range


# 								space.sc.neighborhood
#
#	Cautions! If set to "trace", then the following parameters must be set as well: 
#		- space.sc.init=TRACE.
#		- space.sc.trace_path=<the_path_to_trace_file>
#
#
# Defines how the neighborhood of each cell is build:
#	- ALL: all cells are neighbors whith each other
#	- ALL+SELF: same as all, including each cell itself. This is usefull when 
#		mobiles loop back inside the area when moving out of area range instead
#		of being reset
#	- DISCOVER: discovers the neighborhood during a warmup period
#	- NONE: No neighbors` useful for studying no caching scenarios
#	- TRACE: as defined by trace of small cells
space.sc.neighborhood=TRACE

# Allows small cells to have their own self as a neighbor, e.g. due to mobile looping back within the area.
space.sc.neighborhood.allow_self=true


# space.sc.init_duration.*
# Defines an initial value for the exponential smoothing
# calculation of the average duration of mobile handoff period
# and mobile residence per small cell. 
space.sc.init_duration.handoff=10
space.sc.init_duration.residence=10



# sc.connection_policy:
# A list of combined policies. Note that policy priority is in accordance to the list order.
space.sc.connection_policy=CR
	# out_of_range: 
	# 		MU got out of range of previously hosting SC coverage.
	# max_cached_epc_std: 
	# 		means that there is preference for small cells that have cached 
	#		the most items according to the standard EPC method.
	# closest_range: 
	# 		"closest to center of SC"
	# random: 
	# 		for chosing a random SC in range. Combinations of rules above. 
	#
	# You may also use shortcut values:
		# "Closest_Range" or "CR" for: closest_in_range, random_in_range
		# "Cached_Content" or "CC" for: out_of_range, max_cached, closest_in_range,	random_in_range
	
	
space.mc.connection_policy=default	# Currently, no other option other than default is supported
	
	
#							space.sc.warmup_period
# 	Simiulation warmup period for discovering neighbors, transition times and probabilities, etc..
#	No trace requests are loaded during this period. 
#	Also, consider the value of poperty stats.min_time when setting an appropriate warmup_period value  
space.sc.warmup_period=200



#							space.sc.handoff_probability.stdev	
space.sc.handoff_probability.stdev=0.025	


#							space.sc.buffer.size
#	The size of a small cell buffer counted in number of items.
#	If the requests of the mobile users are loaded from a trace (see parameter space.mu.dmd.trace),
#	then the average size per item is used.
#   	1200 MB: 	If ~31MB mean video files requested by 1000 MUs, 25  SCs, with each  
#					MU issuing 1 request at a time, then dmd/sup = 100%
#		1476 MB:	If ~31MB mean video files by 1000MUs, 21 SCs, with 1 request er MU => dmd/sup=100%
#		1240MB MB:	If ~31MB mean video files by 1000MUs, 25 SCs, with 1 request er MU => dmd/sup=100%
space.sc.buffer.size=20mbps#xvas 20mbps as VDSL at home. 600 (802.1n), 54 (802.11g)so  #4096MB






####################################################################################################	
# 									space.item.*
#	The following space.item.* are ignored if trace of requests is used, 
#	i.e., space.mu.dmd.trace!=null.

# space.item.size
#	Note that this parameter is ignored when using a trace of requests.	
space.item.size=1			


# space.item.rnd_id_range
#	Setting this parameter to <1 results in item IDs according to their requestor mobiles' IDs at 
#	item creation time. 
#
#	Note that this parameter is ignored when using a trace of requests.	
space.item.rnd_id_range=0


#							space.item.pop_cmpt
#	Defines how to compute popularity of items. This feature is used for caching method decisions
#	which use the popularity either to cache or to replace a cached item. 
#
space.item.pop_cmpt=pop_type01
#   Valid types:
	# pop_type00:				Same as Type 01, only using request time from trace.				
	#
	# pop_type01:				Type 01 of computation method for popularity of items based on 
	#							temporal locality of demand. Check implementation for details.				
	#
	# pop_type02:				Type 02 of computation method for popularity of items based on 
	#							temporal locality of demand. Same as TYPE 01, only this type, 
	#							in particular, uses trace request times.
	#
	# pop_type03_global_pop:	Type 03 of computation method for popularity of items based on 
	#							local demand. This type uses the global popularity of items 
	#							which are loaded by a trace of requests.
	#

