# caching.Policies
	
	## Standard benchmarks ########################### 
	## NaiveLess is a bit more clever than pure Naive.	
	# caching.MaxPop
	# caching.incremental.Naive
	# caching.incremental.NaiveLess
	# caching.incremental.Oracle

	## EPC Based. ####################################
	## No aggregated probabilities or weighted popularity 
	# caching.incremental.EPC
	# caching.incremental.EPC_with_Pop
	# caching.incremental.PopOnly

	####################################################	
	
	## - EMC and EMPC 
		## with congestion *pricing* 
	# caching.incremental.EMC
	# caching.incremental.EMPC
	# caching.incremental.EMC_with_HandOffTime

	## - EMC and EMPC 
		##with *replacements*
	# caching.rplc.mingain.EMC_R
	# caching.rplc.mingain.EMPC_R
	#

	## - EMC and EMPC 
		## with congestion *pricing* and 
		## with *replacements* 
	# caching.rplc.mingain.priced.EMC_R
	# caching.rplc.mingain.priced.EMPC_R

	## - EMC and EMPC 
		## with *tuned* replacements
	# caching.rplc.mingain.tuned.EMPC_LC_Tuned_a
	# caching.rplc.mingain.tuned.EMPC_LC_Tuned_b
	# caching.rplc.mingain.tuned.EMPC_LC_Tuned_c1
	# caching.rplc.mingain.tuned.EMPC_LC_Tuned_c2


caching.policies = caching.incremental.EMC, caching.incremental.Naive, caching.rplc.mingain.EMPC_R, caching.rplc.mingain.EMC_R, #caching.rplc.mingain.EMPC_R, caching.rplc.mingain.EMC_R, caching.incremental.EMC, caching.incremental.Naive, caching.MaxPop, #caching.incremental.Oracle

# Maximum perecentage of capacity space that a top-popular
# object is allowed to occupy. Otherwise, the object is skipped as a whole.
caching.policies.MaxPop_cutter=0

#Should the caches be preloaded with the most popular content
#from the trace of requests? If this is set to false, preloading
#is used only for the MaxPop caching policy, otherwise it is used
#for all policies. 
caching.preload_caches_all_policies=false


################### Golden ration search for EPC-LC raplacements tunning ###########################
#
# caching.rplc.mingain.sum.heuristic.time.dynamic.
#	The simulation time that needs to elapse in order to run the golden ration search algorithm 
#	and update a, b, c1 and c2.
caching.rplc.mingain.sum.heuristic.time.dynamic.readjustment_period=25
caching.rplc.mingain.sum.heuristic.time.dynamic.max_bound=50


#
#
#
# The performance difference between a and b which indicates that the golden ratio
# search algorithm concluded.
caching.rplc.mingain.sum.heuristic.time.dynamic.stopE=0.25



# 					caching.naive.Type02.threshold
# A threashold for type 02 naive caching Policy. No caching takes place is the history of
# handovers between two cells is less than this theshold.
caching.naive.Type02.threshold = 0.1;

